#
# Pantry Backend
#

openapi: '3.0.3'

info:
  description: Pantry Backend
  version: 0.1.0
  title: Pantry Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /authenticate:
    post:
      description: Authenticate user
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/UserLogin'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
          
        default:
          description: Unexpected Error
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /dummy:
    get:
      description: Dummy Endpoint
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DummyResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /signup:
    get:
      description: Gets all users
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: Unexpected Error
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnexpectedError'
    post:
      description: Creates a new user
      requestBody:
        description: Account to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: Successfully created account 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: Email already in use
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /lists:
    get:
      # security:
      #   - bearerAuth: []
      description: Get all lists
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
  
  /lists/{usr_id}:
    get:
      security:
        - bearerAuth: []
      description: Get all of the given user's lists
      parameters:
      - name: usr_id
        in: path
        description: Id of the user
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        400:
          description: User does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    post:
      # security:
      #   - bearerAuth: []
      description: Create a new list
      parameters:
      - name: usr_id
        in: path
        description: Id of the user the list belongs to
        required: true
        schema:
          type: integer
      requestBody:
        description: List to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewList'
        # allowReserved: true
      responses:
        201:
          description: Successfully created list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        400:
          description: User not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /users/{list_id}:
    get:
      # security:
      #   - bearerAuth: []
      description: Get all of the given list's users
      parameters:
      - name: list_id
        in: path
        description: Id of the list
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: List does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    delete:
      security:
        - bearerAuth: []
      description: Delete List from user
      parameters:
      - name: list_id
        in: path
        description: Id of the user the list belongs to
        required: true
        schema:
          type: integer
      responses:
        201:
          description: Successfully deleted list
        400:
          description: User not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /users_lists:
    get:
      # security:
      #   - bearerAuth: []
      description: Get all user-list connections
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserToList'
        404:
          description: Id not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    post:
      # security:
      #   - bearerAuth: []
      description: Create a new user-list connection
      requestBody:
        description: Account to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserToList'
      responses:
        201:
          description: Successfully created user-list connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToList'
        400:
          description: Invalid id
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /food:
    get:
      security:
        - bearerAuth: []
      description: Get all items
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    post:
      security:
        - bearerAuth: []
      description: Add a food item to list
      requestBody:
        description: Food item to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFood'
      responses:
        201:
          description: Successfully added item 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        409:
          description: Food already there
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /foodInList/{list_id}:
    get:
      security:
        - bearerAuth: []
      description: Get all items
      parameters:
      - name: list_id
        in: path
        description: Id of the list
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Food'
        404:
          description: List does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    post:
      security:
        - bearerAuth: []
      description: Add a food item to list
      parameters:
      - name: list_id
        in: path
        description: Id of the list
        required: true
        schema:
          type: integer
      requestBody:
        description: Food item to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFood'
      responses:
        201:
          description: Successfully added item 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        400:
          description: List does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

  /food/{id}:
    put:
      security:
        - bearerAuth: []
      description: Edit a food
      parameters:
      - name: id
        in: path
        description: Id of food
        required: true
        schema:
          type: integer
        allowReserved: true
      requestBody:
        description: Food to edit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFood'
      responses:
        200:
          description: Successfully edited food 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'   
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'
    delete:
      security:
        - bearerAuth: []
      description: Delete a foodlist item
      parameters:
      - name: id
        in: path
        description: Id of food item
        required: true
        schema:
          type: integer
        allowReserved: true
      responses:
        204:
          description: Successfully deleted item                 
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedError'

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  schemas:
    Error:
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message

    DummyResponse:
      properties:
        message:
          type: string
      required:
        - message
    UnexpectedError:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthUser:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        token:
          type: string
    
    NewUser:
      type: object
      properties:
        name:
            type: string
        email:
            type: string
            format: email
        password:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        usr:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
              format: email
            password:
              type: string

    NewList:
      type: object
      properties:
        list_name:
          type: string

    List:
      type: object
      properties:
        id:
          type: integer
        list_name:
          type: string

    NewUserToList:
      type: object
      properties:
        usr_id:
          type: integer
        list_id:
          type: integer

    UserToList:
      type: object
      properties:
        id:
          type: integer
        usr_id:
          type: integer
        list_id:
          type: integer

    NewFood:
      type: object
      properties:
        item:
          type: string
        amount:
          type: integer
        purchaseDate:
          type: string
          format: date
        notes:
          type: string
        tags:
          type: object
      required:
        - item
        - purchaseDate

    Food:
      type: object
      properties:
        id:
          type: integer
        item:
          type: string
        amount:
          type: integer
        purchaseDate:
          type: string
          format: date
        notes:
          type: string
        tags:
          type: object
